AWSTemplateFormatVersion : '2010-09-09'
Description: 'Splunk Observability Cloud (aka SignalFx) Cloudwatch Event Forwarder App'
Transform: AWS::Serverless-2016-10-31

Parameters:
  SignalFxAccessToken:
    Type: String
    Description: 'Splunk Observability Cloud Access Token. Can be found in the Splunk Observability Cloud --> Settings --> Access Tokens.'
  SignalFxIngestEndpoint:
    Type: String
    Default: 'https://ingest.<REALM>.signalfx.com'
    Description: 'Splunk Observability Cloud Ingest Endpoint. Can be found in the Splunk Observability Cloud --> My Profile --> Organizations --> Real-time Data Ingest.'
  SignalFxSendTimeout:
    Type: String
    Default: 1000
    Description: 'Send timeout in milliseconds.'
  EventSources:
    Type: CommaDelimitedList
    Default: 'aws.ec2'
    Description: 'Event sources to forward to the Splunk Observability Cloud. Use comma delimited list for multiple sources, for example: "aws.ec2,aws.s3". Be cautious with using "aws.lambda" (more in README)'

Resources:
  SignalFxLambdaWrapperApp:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-2:254067382080:applications/wrapper-node-sfx-app
        SemanticVersion: 0.4.2
    Outputs:
      LayerArn:
        Value:
          Fn:GetAtt:
            - SignalFxLambdaWrapperApp
            - Arn
  SignalFxCloudwatchEventsForwarder:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !GetAtt SignalFxLambdaWrapperApp.Outputs.LayerArn
      Handler: cloudwatch-event-forwarder-no-encryption.handler
      Runtime: nodejs20.x
      CodeUri: ./examples/cloudwatch-event-forwarder-no-encryption.js
      Timeout: 60
      Environment:
        Variables:
          SIGNALFX_ACCESS_TOKEN:
            Ref: SignalFxAccessToken
          SIGNALFX_ENDPOINT_URL:
            Ref: SignalFxIngestEndpoint
          SIGNALFX_SEND_TIMEOUT:
            Ref: SignalFxSendTimeout
      Events:
        CWEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source: !Ref EventSources

# Publishing the App in Serverless application repo:
# sam validate --profile <awsprofile> --template template.yaml --region <region>
# sam package --profile <awsprofile> --s3-bucket <bucket> --region <region> --output-template-file packaged.yaml --template template.yaml
# Use AWS SAM CLI or AWS console to publish the packaged.yaml file.